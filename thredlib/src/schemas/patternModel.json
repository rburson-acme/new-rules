{
  "$ref": "#/definitions/PatternModel",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AddressModel": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "string"
        }
      ],
      "description": "address to participants or groups from the publish spec"
    },
    "BooleanInput": {
      "additionalProperties": false,
      "properties": {
        "display": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "set": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "display": {
                "type": "string"
              },
              "value": {
                "type": "boolean"
              }
            },
            "required": [
              "display",
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "type": {
          "const": "boolean",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type",
        "display",
        "set"
      ],
      "type": "object"
    },
    "ConditionModel": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A description of the condition.",
          "type": "string"
        },
        "onTrue": {
          "$ref": "#/definitions/ConsequentModel",
          "description": "A expression to be run if the condition is true."
        },
        "operands": {
          "description": "The composite conditions to be used for And/Or conditions if type is 'and' or 'or'.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ConditionModel"
              },
              {
                "$ref": "#/definitions/FilterModel"
              }
            ]
          },
          "type": "array"
        },
        "publish": {
          "$ref": "#/definitions/PublishModel",
          "description": "Specifies which participants should receive the the new Event if the condition is true. Describes 'who' should receive the new Event."
        },
        "transform": {
          "$ref": "#/definitions/TransformModel",
          "description": "The transform to be applied if the condition is true. Describes 'what' should be sent in the new Event."
        },
        "transition": {
          "$ref": "#/definitions/TransitionModel",
          "description": "The state (Reaction) transition that should occur if the condition is true. The default (if not specified) is to transition to the next Reaction (or terminate if none)."
        },
        "type": {
          "description": "The type of the condition. May be 'and', 'or', or 'filter'.",
          "enum": [
            "and",
            "or",
            "filter"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ConsequentModel": {
      "additionalProperties": false,
      "properties": {
        "xpr": {
          "description": "A jsonata expression to be run when a condition is true. This is a 'side effect' of the condition. Generally used to store values in scope for later use  {@link  https://jsonata.org/ }",
          "type": "string"
        }
      },
      "required": [
        "xpr"
      ],
      "type": "object"
    },
    "ElementModel": {
      "additionalProperties": false,
      "properties": {
        "group": {
          "$ref": "#/definitions/GroupModel"
        },
        "image": {
          "$ref": "#/definitions/ImageModel"
        },
        "input": {
          "$ref": "#/definitions/InputModel"
        },
        "map": {
          "$ref": "#/definitions/MapModel"
        },
        "text": {
          "$ref": "#/definitions/TextModel"
        },
        "video": {
          "$ref": "#/definitions/VideoModel"
        }
      },
      "type": "object"
    },
    "EventContent": {
      "additionalProperties": false,
      "properties": {
        "error": {
          "additionalProperties": false,
          "properties": {
            "cause": {},
            "code": {
              "type": "number"
            },
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ],
          "type": "object"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/InlineItem"
          },
          "type": "array"
        },
        "resources": {
          "items": {
            "$ref": "#/definitions/Resource"
          },
          "type": "array"
        },
        "tasks": {
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/EventTask"
              },
              {
                "items": {
                  "$ref": "#/definitions/EventTask"
                },
                "type": "array"
              }
            ]
          },
          "type": "array"
        },
        "values": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "items": {
                "type": "object"
              },
              "type": "array"
            }
          ]
        },
        "valuesType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventData": {
      "additionalProperties": false,
      "properties": {
        "advice": {
          "additionalProperties": false,
          "properties": {
            "eventType": {
              "type": "string"
            },
            "template": {
              "$ref": "#/definitions/TemplateModel"
            },
            "title": {
              "type": "string"
            }
          },
          "required": [
            "eventType"
          ],
          "type": "object"
        },
        "content": {
          "$ref": "#/definitions/EventContent"
        },
        "description": {
          "type": "string"
        },
        "display": {
          "additionalProperties": false,
          "properties": {
            "uri": {
              "type": "string"
            }
          },
          "required": [
            "uri"
          ],
          "type": "object"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventTask": {
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "op": {
          "type": "string"
        },
        "options": {
          "type": "object"
        },
        "params": {
          "$ref": "#/definitions/EventTaskParams"
        }
      },
      "required": [
        "op"
      ],
      "type": "object"
    },
    "EventTaskCollectorParams": {
      "additionalProperties": false,
      "properties": {
        "limit": {
          "type": "number"
        },
        "skip": {
          "type": "number"
        },
        "sort": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "desc": {
                "type": "boolean"
              },
              "field": {
                "type": "string"
              }
            },
            "required": [
              "field"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "EventTaskParams": {
      "additionalProperties": false,
      "properties": {
        "collector": {
          "$ref": "#/definitions/EventTaskCollectorParams"
        },
        "matcher": {
          "type": "object"
        },
        "selector": {
          "additionalProperties": false,
          "properties": {
            "exclude": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "include": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "type": {
          "type": "string"
        },
        "values": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "items": {},
              "type": "array"
            }
          ]
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "FilterModel": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A description of the condition.",
          "type": "string"
        },
        "onTrue": {
          "$ref": "#/definitions/ConsequentModel",
          "description": "A expression to be run if the condition is true."
        },
        "operands": {
          "description": "The composite conditions to be used for And/Or conditions if type is 'and' or 'or'.",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/ConditionModel"
              },
              {
                "$ref": "#/definitions/FilterModel"
              }
            ]
          },
          "type": "array"
        },
        "publish": {
          "$ref": "#/definitions/PublishModel",
          "description": "Specifies which participants should receive the the new Event if the condition is true. Describes 'who' should receive the new Event."
        },
        "transform": {
          "$ref": "#/definitions/TransformModel",
          "description": "The transform to be applied if the condition is true. Describes 'what' should be sent in the new Event."
        },
        "transition": {
          "$ref": "#/definitions/TransitionModel",
          "description": "The state (Reaction) transition that should occur if the condition is true. The default (if not specified) is to transition to the next Reaction (or terminate if none)."
        },
        "type": {
          "description": "The type of the condition. May be 'and', 'or', or 'filter'.",
          "enum": [
            "and",
            "or",
            "filter"
          ],
          "type": "string"
        },
        "xpr": {
          "description": "A jsonata expression that will be evaluated to determine if the filter is true. Describes 'when' and event should be created and sent.  {@link  https://jsonata.org/ }",
          "type": "string"
        }
      },
      "required": [
        "type",
        "xpr"
      ],
      "type": "object"
    },
    "GroupModel": {
      "additionalProperties": false,
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ElementModel"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ImageModel": {
      "additionalProperties": false,
      "properties": {
        "height": {
          "type": "number"
        },
        "uri": {
          "type": "string"
        },
        "width": {
          "type": "number"
        }
      },
      "required": [
        "uri",
        "height",
        "width"
      ],
      "type": "object"
    },
    "InlineItem": {
      "additionalProperties": false,
      "properties": {
        "content": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "encoding": {
          "type": "string"
        }
      },
      "required": [
        "contentType",
        "encoding",
        "content"
      ],
      "type": "object"
    },
    "InputModel": {
      "anyOf": [
        {
          "$ref": "#/definitions/BooleanInput"
        },
        {
          "$ref": "#/definitions/NumericInput"
        },
        {
          "$ref": "#/definitions/TextInput"
        },
        {
          "$ref": "#/definitions/NominalInput"
        }
      ]
    },
    "InteractionModel": {
      "additionalProperties": false,
      "description": "A model for facilitating user or machine interaction",
      "properties": {
        "interaction": {
          "additionalProperties": false,
          "properties": {
            "content": {
              "items": {
                "$ref": "#/definitions/ElementModel"
              },
              "type": "array"
            }
          },
          "required": [
            "content"
          ],
          "type": "object"
        }
      },
      "required": [
        "interaction"
      ],
      "type": "object"
    },
    "MapLocation": {
      "additionalProperties": false,
      "properties": {
        "latitude": {
          "type": "string"
        },
        "longitude": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "latitude",
        "longitude"
      ],
      "type": "object"
    },
    "MapModel": {
      "additionalProperties": false,
      "properties": {
        "locations": {
          "items": {
            "$ref": "#/definitions/MapLocation"
          },
          "type": "array"
        }
      },
      "required": [
        "locations"
      ],
      "type": "object"
    },
    "NominalInput": {
      "additionalProperties": false,
      "properties": {
        "display": {
          "type": "string"
        },
        "multiple": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "set": {
          "items": {
            "additionalProperties": false,
            "properties": {
              "display": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "display",
              "value"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "type": {
          "const": "nominal",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type",
        "display",
        "set"
      ],
      "type": "object"
    },
    "NumericInput": {
      "additionalProperties": false,
      "properties": {
        "display": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "const": "numeric",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type",
        "display"
      ],
      "type": "object"
    },
    "PatternModel": {
      "properties": {
        "broadcastAllowed": {
          "description": "Whether or not broadcasting from participants is allowed",
          "type": "boolean"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "A description of the pattern",
          "type": "string"
        },
        "echoResponses": {
          "description": "Whether or not participants responses are echoed to the Thred",
          "type": "boolean"
        },
        "id": {
          "description": "A unique identifier for the pattern. This will be derived from the name if not provided.",
          "type": "string"
        },
        "instanceInterval": {
          "description": "The time required between creation of new threads 0 for none required",
          "type": "number"
        },
        "maxInstances": {
          "description": "The maximum number of thred instances that may be running at the same time",
          "type": "number"
        },
        "modified": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "A unique name for the pattern",
          "type": "string"
        },
        "reactions": {
          "description": "Reactions represent thred states",
          "items": {
            "$ref": "#/definitions/ReactionModel"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "reactions"
      ],
      "type": "object"
    },
    "PermissionModel": {
      "additionalProperties": false,
      "properties": {
        "allowedRoles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "allowedRoles"
      ],
      "type": "object"
    },
    "PublishModel": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A human-readable description of the publish spec",
          "type": "string"
        },
        "onPublish": {
          "$ref": "#/definitions/ConsequentModel",
          "description": "An expression to be run at publish time with the new, outbound Event as the event paramater."
        },
        "to": {
          "$ref": "#/definitions/AddressModel",
          "description": "The address(es) to send the outbound Event to. These may be participants or groups."
        }
      },
      "required": [
        "to"
      ],
      "type": "object"
    },
    "ReactionModel": {
      "additionalProperties": false,
      "properties": {
        "allowedSources": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "The optional list of sources that are allowed to activate the reaction."
        },
        "condition": {
          "anyOf": [
            {
              "$ref": "#/definitions/ConditionModel"
            },
            {
              "$ref": "#/definitions/FilterModel"
            }
          ],
          "description": "The condition that must be met for the reaction to be activated."
        },
        "description": {
          "description": "The optional description of the reaction.",
          "type": "string"
        },
        "expiry": {
          "additionalProperties": false,
          "description": "The optional expiration policy of the reaction.",
          "properties": {
            "interval": {
              "description": "The interval after which the reaction expires in millis. Upon expiration the Reaction will use the default transition or the one specified in the expiry object.",
              "type": "number"
            },
            "transition": {
              "$ref": "#/definitions/TransitionModel",
              "description": "The optional transition that occurs when the reaction expires."
            }
          },
          "required": [
            "interval"
          ],
          "type": "object"
        },
        "name": {
          "description": "The optional name of the reaction. This makes it easier to refer to in patterns.",
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/PermissionModel",
          "description": "The set of permissions required to activate the reaction."
        }
      },
      "required": [
        "condition"
      ],
      "type": "object"
    },
    "Resource": {
      "additionalProperties": false,
      "properties": {
        "contentType": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      },
      "required": [
        "contentType",
        "uri"
      ],
      "type": "object"
    },
    "TemplateModel": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A description of the template",
          "type": "string"
        },
        "interactions": {
          "description": "The interactions that make up the template",
          "items": {
            "$ref": "#/definitions/InteractionModel"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the template",
          "type": "string"
        }
      },
      "required": [
        "name",
        "interactions"
      ],
      "type": "object"
    },
    "TextInput": {
      "additionalProperties": false,
      "properties": {
        "display": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "const": "text",
          "type": "string"
        }
      },
      "required": [
        "name",
        "type",
        "display"
      ],
      "type": "object"
    },
    "TextModel": {
      "additionalProperties": false,
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "required": [
        "value"
      ],
      "type": "object"
    },
    "TransformModel": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "An optional description of the transform.",
          "type": "string"
        },
        "eventDataTemplate": {
          "$ref": "#/definitions/EventData",
          "description": "Allows for defining The Event Data portion of the outbound event."
        },
        "meta": {
          "additionalProperties": false,
          "description": "Meta data for the transform.",
          "properties": {
            "reXpr": {
              "description": "An optional jsonata expression that allows for setting the 're' property of the outbound event.",
              "type": "string"
            }
          },
          "type": "object"
        },
        "templateXpr": {
          "description": "A jsonata expression to be run to generate the entire Event Data portion of the outbound event.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TransitionInput": {
      "enum": [
        "forward",
        "default",
        "local"
      ],
      "type": "string"
    },
    "TransitionModel": {
      "additionalProperties": false,
      "properties": {
        "description": {
          "description": "A description of the transition.",
          "type": "string"
        },
        "input": {
          "$ref": "#/definitions/TransitionInput",
          "description": "Specifies how the transition should supply the input to the next state (Reaction).\n- 'default' - wait for input from the next matching Event\n- 'forward' - use the Event that triggered the current (this) Reaction\n- 'local' - use a locally stored value"
        },
        "localName": {
          "description": "The name of the locally stored value to be used as input to the next state (Reaction) if input is 'local'.",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "VideoModel": {
      "additionalProperties": false,
      "properties": {
        "uri": {
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "type": "object"
    }
  }
}