services:
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --save 20 1 --loglevel warning --notify-keyspace-events KA
    ports:
      - "6379:6379"
    # networks:
    #   - storage-net
    volumes:
     - ./.docker/redis-data:/data
     #- ./.docker/config/redis.conf:/usr/local/etc/redis/redis.conf

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    volumes:
        #- ./.docker/rabbitmq/etc/:/etc/rabbitmq/
        - ./.docker/rabbitmq/data/:/var/lib/rabbitmq/
        - ./.docker/rabbitmq/logs/:/var/log/rabbitmq/
        # uncomment for config
        # - ./.docker/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    #environment:
        #RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
        #RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
        #RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    # networks:
    #   - storage-net
    ports:
        - 5672:5672
        - 15672:15672

  mongo-repl-1:
    image: mongo:latest
    container_name: mongo-repl-1
    restart: always
    command: mongod --replSet rs0 --bind_ip_all
    environment:
      MONGO_INITDB_DATABASE: admin
    ports:
      - 27017:27017
    # networks:
    #   - storage-net
    # volumes:
    #   - ~/.docker/mongodb/data/db:/data/db
      # - ./.docker/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      # test: echo 'db.runCommand("ping").ok' | mongosh mongo-repl-1:27017/admin --quiet
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/admin --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # mongo-repl-2:
  #   image: mongo:latest
  #   container_name: mongo-repl-2
  #   restart: always
  #   command: mongod --replSet rs0 --bind_ip_all
  #   networks:
  #     - storage-net
  #   # volumes:
  #   #   - mongo-data-2:/data/db # Use different volume paths
  #   healthcheck:
  #     test: echo 'db.runCommand("ping").ok' | mongosh --host mongo-repl-2:27017/admin --quiet
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s

  # mongo-repl-3:
  #   image: mongo:latest
  #   container_name: mongo-repl-3
  #   restart: always
  #   command: mongod --replSet rs0 --bind_ip_all
  #   networks:
  #     - storage-net
  #   # volumes:
  #   #   - mongo-data-3:/data/db # Use different volume paths
  #   healthcheck:
  #     test: echo 'db.runCommand("ping").ok' | mongosh --host mongo-repl-3:27017/admin --quiet
  #     interval: 10s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s

  mongo-setup:
    image: mongo:latest
    container_name: mongo-setup
    depends_on:
      mongo-repl-1:
        condition: service_healthy
      # mongo-repl-2:
      #   condition: service_started
      # mongo-repl-3:
      #   condition: service_started
    # networks:
    #   - storage-net
    volumes:
      - ./scripts/setup-repl.sh:/scripts/setup-repl.sh
    command: sh -c "chmod +x /scripts/setup-repl.sh && /scripts/setup-repl.sh"

# Bootstrap initialization container
  srvthreds-bootstrap:
    build:
      context: ../../
      dockerfile: srvthreds/scripts/development/dockerCompose
      # dockerfile: srvthreds/Dockerfile
    container_name: srvthreds-bootstrap
    entrypoint: []
    command: ["npm", "run", "container-bootstrap"]
    depends_on:
      mongo-setup:
        condition: service_completed_successfully
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      - NODE_ENV=development
      # - MONGO_HOST=mongo-repl-1:27017,mongo-repl-2:27017,mongo-repl-3:27017
      # - MONGO_HOST=mongo-repl-1:27017
      # - REDIS_HOST=redis
    restart: "no"  # Run once and exit
    # networks:
    #   - storage-net

  # SrvThreds Engine Service
  srvthreds-engine:
    build:
      context: ..
      dockerfile: srvthreds/Dockerfile
    container_name: srvthreds-engine
    network_mode: "host"
    command: ["node", "/app/dist-server/index.js", "-d"]
    depends_on:
      srvthreds-bootstrap:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=development
      # - MONGO_HOST=mongo-repl-1:27017,mongo-repl-2:27017,mongo-repl-3:27017
      # - REDIS_HOST=redis
    restart: unless-stopped
    # networks:
    #   - storage-net
    #   - app-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'

  # SrvThreds Session Agent
  srvthreds-session-agent:
    build:
      context: ..
      dockerfile: srvthreds/Dockerfile
    container_name: srvthreds-session-agent
    network_mode: "host"
    command: ["node", "/app/dist-server/agent/agent.js", "-c", "session_agent", "-d"]
    depends_on:
      srvthreds-bootstrap:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=development
      # - MONGO_HOST=mongo-repl-1:27017,mongo-repl-2:27017,mongo-repl-3:27017
      # - REDIS_HOST=redis
    restart: unless-stopped
    # networks:
    #   - storage-net
    #   - app-net
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  # SrvThreds Persistence Agent
  srvthreds-persistence-agent:
    build:
      context: ..
      dockerfile: srvthreds/Dockerfile
    container_name: srvthreds-persistence-agent
    network_mode: "host"
    command: ["node", "/app/dist-server/agent/agent.js", "-c", "persistence_agent", "-d"]
    depends_on:
      srvthreds-bootstrap:
        condition: service_completed_successfully
    environment:
      - NODE_ENV=development
      # - MONGO_HOST=mongo-repl-1:27017,mongo-repl-2:27017,mongo-repl-3:27017
      # - REDIS_HOST=redis
    restart: unless-stopped
    # networks:
    #   - storage-net
    #   - app-net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.4'
        reservations:
          memory: 256M
          cpus: '0.2'

# networks:
#   storage-net:
#     driver: bridge
#   app-net:
#     driver: bridge

volumes:
  mongo-data-2:
  mongo-data-3:
  # nginx-session:
  #   # running in host mode because we're not running the node server in a container for demo purposes...
  #   network_mode: host
  #   container_name: nginx-session
  #   hostname: nginx-session
  #   image: nginx:latest
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - ./.docker/config/nginx-session:/etc/nginx
  #     - ./.docker/config/ssl:/etc/ssl
